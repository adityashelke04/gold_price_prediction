# -*- coding: utf-8 -*-
"""Gold Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kpgc8_ZQ1coJpCAO1eBj496e9KcYv2zG

Importing Libraries
"""

import numpy as np #to get numpy arrays
import pandas as pd #to make dataframes
import matplotlib.pyplot as plt #plot graphs
import seaborn as sns #plot graphs
from sklearn.model_selection import train_test_split #to split the data
from sklearn.ensemble import RandomForestRegressor #model used
from sklearn import metrics #to evaluate our model

"""Data Collection and Processing"""

#Loading csv dataset to pandas dataframe
gold_data = pd.read_csv('/content/gld_price_data.csv')

#print first 5 rows in the dataframe
gold_data.head()
#spx - stocks value, #gld - gold price, uso - US oil price, slv - silver price, EUR/USD - euros and usd currency rate

#print last 5 rows of the dataframe
gold_data.tail()

# number of rows and columns
gold_data.shape

# getting some basic info about the data like datatype, non nulls etc
gold_data.info()

# checking the number of missing values
gold_data.isnull().sum()

# getting the statistics of data
gold_data.describe()
#count - total count, mean, std deviation, min, % shows how much % is less than 25%/50%/75%, max

"""Correlation:
1. Positive Correlation (directly proportional)
2. Negative Correlation (inversely proportional)
"""

# Calculate the correlation matrix, excluding non-numeric columns like 'Date'
correlation = gold_data.drop('Date', axis=1).corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f',annot=True, annot_kws={'size':8}, cmap='Blues')
# fmt = 0.1f precision, annotation true/false, annot size and color

# correlation values of GLD
print(correlation['GLD']) #check positive/negative correlation wrt to GLD

# checking the distribution of the GLD price
sns.distplot(gold_data['GLD'],color='green')

"""Splitting the Features and Target"""

X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)

print(Y)

"""Splitting into Training data and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size = 0.2, random_state=2) #0.2 is 20%

"""#Model Training: Random Forest Regressor
It consists of n number of decision trees, then by Majority voting/Average output is determined.
"""

model = RandomForestRegressor(n_estimators=100)

#training the model
model.fit(X_train,Y_train)

"""Model Evaluation"""

#prediction on Test Data
test_data_prediction = model.predict(X_test)

print(test_data_prediction)

# R squared error
error_score = metrics.r2_score(Y_test, test_data_prediction) #check the error_score - real vs predicted
print("R squared error: ",error_score) #use diff models or deep neural networks to get more better error_score

"""Compare the Actual Values and Predicted Values in Plot"""

Y_test = list(Y_test) #convert it into list

plt.plot(Y_test, color = 'blue', label = 'Actual Value')
plt.plot(test_data_prediction, color = 'green', label = 'Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

